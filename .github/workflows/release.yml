# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# docs: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

name: ðŸš€ Release

on:
  release: # Docs: <https://git.io/JeBz1#release-event-release>
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [linux, darwin, windows] # freebsd
        arch: [amd64, arm64] # 386
    steps:
      - uses: actions/checkout@v5
      - {uses: actions/setup-go@v5, with: {go-version-file: go.mod}}
      - {uses: gacts/github-slug@v1, id: slug}
      - id: values
        run: echo "binary-name=error-pages-${{ matrix.os }}-${{ matrix.arch }}`[ ${{ matrix.os }} = 'windows' ] && echo '.exe'`" >> $GITHUB_OUTPUT
      - env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
          LDFLAGS: -s -w -X github.com/delta10/error-pages/internal/version.version=${{ steps.slug.outputs.version }}
        run: go build -trimpath -ldflags "$LDFLAGS" -o "./${{ steps.values.outputs.binary-name }}" ./cmd/error-pages/
      - uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.values.outputs.binary-name }}
          asset_name: ${{ steps.values.outputs.binary-name }}
          tag: ${{ github.ref }}

      - if: matrix.os == 'linux' && matrix.arch == 'amd64'
        run: mkdir ./out && ./${{ steps.values.outputs.binary-name }} build --index --disable-minification --target-dir ./out
      - if: matrix.os == 'linux' && matrix.arch == 'amd64'
        uses: actions/upload-artifact@v4
        with:
          name: error-pages-static
          path: out/
          if-no-files-found: error
          retention-days: 1
      - if: matrix.os == 'linux' && matrix.arch == 'amd64'
        working-directory: ./out
        run: zip -r ./../templates.zip .
      - if: matrix.os == 'linux' && matrix.arch == 'amd64'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: templates.zip
          asset_name: error-pages-static.zip
          tag: ${{ github.ref }}

  demo:
    name: Update the demo (GitHub Pages)
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: error-pages-static
          path: .artifact
      - uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./.artifact

  docker-image:
    name: Build the docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # This is required for requesting the JWT
    steps:
      - uses: actions/checkout@v5
      - uses: sigstore/cosign-installer@v3.5.0
      - {uses: gacts/github-slug@v1, id: slug}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build-and-push
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          build-args: "APP_VERSION=${{ steps.slug.outputs.version }}"
          tags: |
            ghcr.io/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.slug.outputs.version }}
            ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.slug.outputs.version-major }}.${{ steps.slug.outputs.version-minor }}
            ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.slug.outputs.version-major }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
